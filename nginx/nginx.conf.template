limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;

# Define upstream servers
upstream backend {
    server ${BACKEND_HOST}
}

upstream client {
    server ${CLIENT_HOST}
}

upstream admin {
    server ${ADMIN_HOST}
}

# API Server
server {
    listen 80;
    server_name ${BACKEND_DOMAIN};

    # Apply rate limiting
    limit_req zone=mylimit burst=20 nodelay;

    location / {
        proxy_pass http://backend;
        proxy_http_version 1.1;

        # Proxy headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_cache_bypass $http_upgrade;
    }
}

server {
    listen 80;
    server_name ${BACKEND_DOMAIN};

    location / {
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_cache_bypass $http_upgrade;
    }
}

server {
    listen 80;
    server_name ${BACKEND_DOMAIN};

    location / {
        proxy_pass http://admin;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_cache_bypass $http_upgrade;
    }
}
