version: "0.1"
name: ${PROJECT}

services:
  postgres: # Will become myapp_postgres
    image: postgres:17
    container_name: ${PROJECT}_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-rroot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-root}
      POSTGRES_DB: ${POSTGRES_DB:-ruxlog}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "0.0.0.0:5000:5432"
    networks:
      - network
    # command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-rroot} -d ${POSTGRES_DB:-ruxlog}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    user: postgres

  postgres_backup: # Will become myapp_backup
    name: ${PROJECT}_postgres_backup
    image: prodrigestivill/postgres-backup-local
    restart: always
    volumes:
      - ./backups:/backups
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-ruxlog}
      - POSTGRES_USER=${POSTGRES_USER:-rroot}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-root}
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
    networks:
      - network

  redis:
    image: redis:7.4.1-alpine
    container_name: ${PROJECT}_redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --user ${REDIS_USER} on >${REDIS_PASSWORD} ~* &* +@all
    environment:
      - REDIS_USER=${REDIS_USER:-rred}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-red}
    volumes:
      - redis_data:/data
    networks:
      - network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "redis-cli",
          "--user",
          "${REDIS_USER:-rred}",
          "--pass",
          "${REDIS_PASSWORD:-red}",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:
    name: ${PROJECT}_postgres_data
    driver: local
  redis_data:
    name: ${PROJECT}_redis_data
    driver: local

networks:
  network:
    name: ${PROJECT}_network
    driver: bridge
